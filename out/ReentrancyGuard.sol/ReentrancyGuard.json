{"abi":[{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink/contracts/src/v0.6/\",\":chainlink/=lib/chainlink/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/libraries/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x0b32fc187badba8280bd857d5b9cc8cf86d73059296d72aa90be87b5b59dd934\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c4bef445029105b1e9efaabf41f4bd33ba60488c275577bf2c77166ec862739\",\"dweb:/ipfs/QmZjutFoYkFpKGVUdX5o7LnYPHubru5Ufz6abs5Dw32MYb\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.18+commit.87f61d96"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ReentrancyGuardReentrantCall"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@chainlink/contracts/=lib/chainlink/contracts/src/v0.6/","chainlink/=lib/chainlink/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/libraries/utils/ReentrancyGuard.sol":"ReentrancyGuard"},"evmVersion":"paris","libraries":{}},"sources":{"src/libraries/utils/ReentrancyGuard.sol":{"keccak256":"0x0b32fc187badba8280bd857d5b9cc8cf86d73059296d72aa90be87b5b59dd934","urls":["bzz-raw://8c4bef445029105b1e9efaabf41f4bd33ba60488c275577bf2c77166ec862739","dweb:/ipfs/QmZjutFoYkFpKGVUdX5o7LnYPHubru5Ufz6abs5Dw32MYb"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"src/libraries/utils/ReentrancyGuard.sol","id":59651,"exportedSymbols":{"ReentrancyGuard":[59650]},"nodeType":"SourceUnit","src":"112:3138:87","nodes":[{"id":59583,"nodeType":"PragmaDirective","src":"112:23:87","nodes":[],"literals":["solidity","0.8",".18"]},{"id":59650,"nodeType":"ContractDefinition","src":"888:2361:87","nodes":[{"id":59587,"nodeType":"VariableDeclaration","src":"1676:41:87","nodes":[],"constant":true,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1701:12:87","scope":59650,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":59585,"name":"uint256","nodeType":"ElementaryTypeName","src":"1676:7:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":59586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1716:1:87","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"id":59590,"nodeType":"VariableDeclaration","src":"1723:37:87","nodes":[],"constant":true,"mutability":"constant","name":"_ENTERED","nameLocation":"1748:8:87","scope":59650,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":59588,"name":"uint256","nodeType":"ElementaryTypeName","src":"1723:7:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":59589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1759:1:87","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"id":59592,"nodeType":"VariableDeclaration","src":"1767:23:87","nodes":[],"constant":false,"mutability":"mutable","name":"_status","nameLocation":"1783:7:87","scope":59650,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":59591,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"id":59595,"nodeType":"ErrorDefinition","src":"1854:37:87","nodes":[],"documentation":{"id":59593,"nodeType":"StructuredDocumentation","src":"1797:52:87","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","name":"ReentrancyGuardReentrantCall","nameLocation":"1860:28:87","parameters":{"id":59594,"nodeType":"ParameterList","parameters":[],"src":"1888:2:87"}},{"id":59603,"nodeType":"FunctionDefinition","src":"1897:53:87","nodes":[],"body":{"id":59602,"nodeType":"Block","src":"1911:39:87","nodes":[],"statements":[{"expression":{"id":59600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":59598,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59592,"src":"1921:7:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":59599,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59587,"src":"1931:12:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1921:22:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":59601,"nodeType":"ExpressionStatement","src":"1921:22:87"}]},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":59596,"nodeType":"ParameterList","parameters":[],"src":"1908:2:87"},"returnParameters":{"id":59597,"nodeType":"ParameterList","parameters":[],"src":"1911:0:87"},"scope":59650,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":59614,"nodeType":"ModifierDefinition","src":"2327:103:87","nodes":[],"body":{"id":59613,"nodeType":"Block","src":"2351:79:87","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":59606,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59630,"src":"2361:19:87","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":59607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2361:21:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":59608,"nodeType":"ExpressionStatement","src":"2361:21:87"},{"id":59609,"nodeType":"PlaceholderStatement","src":"2392:1:87"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":59610,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59638,"src":"2403:18:87","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":59611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2403:20:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":59612,"nodeType":"ExpressionStatement","src":"2403:20:87"}]},"documentation":{"id":59604,"nodeType":"StructuredDocumentation","src":"1956:366:87","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"name":"nonReentrant","nameLocation":"2336:12:87","parameters":{"id":59605,"nodeType":"ParameterList","parameters":[],"src":"2348:2:87"},"virtual":false,"visibility":"internal"},{"id":59630,"nodeType":"FunctionDefinition","src":"2436:310:87","nodes":[],"body":{"id":59629,"nodeType":"Block","src":"2475:271:87","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":59619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":59617,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59592,"src":"2564:7:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":59618,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59590,"src":"2575:8:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2564:19:87","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":59624,"nodeType":"IfStatement","src":"2560:87:87","trueBody":{"id":59623,"nodeType":"Block","src":"2585:62:87","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":59620,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59595,"src":"2606:28:87","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":59621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2606:30:87","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":59622,"nodeType":"RevertStatement","src":"2599:37:87"}]}},{"expression":{"id":59627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":59625,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59592,"src":"2721:7:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":59626,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59590,"src":"2731:8:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2721:18:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":59628,"nodeType":"ExpressionStatement","src":"2721:18:87"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2445:19:87","parameters":{"id":59615,"nodeType":"ParameterList","parameters":[],"src":"2464:2:87"},"returnParameters":{"id":59616,"nodeType":"ParameterList","parameters":[],"src":"2475:0:87"},"scope":59650,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":59638,"nodeType":"FunctionDefinition","src":"2752:209:87","nodes":[],"body":{"id":59637,"nodeType":"Block","src":"2790:171:87","nodes":[],"statements":[{"expression":{"id":59635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":59633,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59592,"src":"2932:7:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":59634,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59587,"src":"2942:12:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2932:22:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":59636,"nodeType":"ExpressionStatement","src":"2932:22:87"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2761:18:87","parameters":{"id":59631,"nodeType":"ParameterList","parameters":[],"src":"2779:2:87"},"returnParameters":{"id":59632,"nodeType":"ParameterList","parameters":[],"src":"2790:0:87"},"scope":59650,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":59649,"nodeType":"FunctionDefinition","src":"3140:107:87","nodes":[],"body":{"id":59648,"nodeType":"Block","src":"3204:43:87","nodes":[],"statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":59646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":59644,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59592,"src":"3221:7:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":59645,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59590,"src":"3232:8:87","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3221:19:87","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":59643,"id":59647,"nodeType":"Return","src":"3214:26:87"}]},"documentation":{"id":59639,"nodeType":"StructuredDocumentation","src":"2967:168:87","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3149:23:87","parameters":{"id":59640,"nodeType":"ParameterList","parameters":[],"src":"3172:2:87"},"returnParameters":{"id":59643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":59642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":59649,"src":"3198:4:87","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":59641,"name":"bool","nodeType":"ElementaryTypeName","src":"3198:4:87","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3197:6:87"},"scope":59650,"stateMutability":"view","virtual":false,"visibility":"internal"}],"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":59584,"nodeType":"StructuredDocumentation","src":"137:750:87","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"linearizedBaseContracts":[59650],"name":"ReentrancyGuard","nameLocation":"906:15:87","scope":59651,"usedErrors":[59595]}],"license":"MIT"},"id":87}