{"abi":[{"type":"error","name":"EnumerableMapNonexistentKey","inputs":[{"name":"key","type":"bytes32","internalType":"bytes32"}]}],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122010b19eba31935bdff7cca68a2ca43f2e1eb7520469ea3151eeb8449402ae981364736f6c63430008120033","sourceMap":"1650:17276:71:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1650:17276:71;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122010b19eba31935bdff7cca68a2ca43f2e1eb7520469ea3151eeb8449402ae981364736f6c63430008120033","sourceMap":"1650:17276:71:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"EnumerableMapNonexistentKey\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Library for managing an enumerable variant of Solidity's https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`] type. Maps have the following properties: - Entries are added, removed, and checked for existence in constant time (O(1)). - Entries are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableMap for EnumerableMap.UintToAddressMap;     // Declare a set state variable     EnumerableMap.UintToAddressMap private myMap; } ``` The following map types are supported: - `uint256 -> address` (`UintToAddressMap`) since v3.0.0 - `address -> uint256` (`AddressToUintMap`) since v4.6.0 - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0 - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0 - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0 [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap. ====\",\"errors\":{\"EnumerableMapNonexistentKey(bytes32)\":[{\"details\":\"Query for a nonexistent map key.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/utils/EnumerableMap.sol\":\"EnumerableMap\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink/contracts/src/v0.6/\",\":@openzeppelin/contracts/=lib/openzeppelin/contracts/contracts/\",\":chainlink/=lib/chainlink/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/libraries/utils/EnumerableMap.sol\":{\"keccak256\":\"0x5780c66f9d217155ad1af01d67e58455beb3fe9cdb64790c20dbdf8cc465f1f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cd7babf7b080cfc91b967ed23835b5020668b77c9d43d421f8c84f6b17ec118a\",\"dweb:/ipfs/QmRYC3GkPgq2sA2sJXv7FfWjCcCcz13ZUkPvFd5bfidGvU\"]},\"src/libraries/utils/EnumerableSet.sol\":{\"keccak256\":\"0x0e3ca9ad9e3f74b51acdbb389dc450e09d35a865270cb74e05ff067b0da5baaf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d9312af03519821e5b55c184b30dbac8eb936701eaeafd6cebbd440947e9763\",\"dweb:/ipfs/QmWvpsYDiZaSu8xLSy6Kh3XtH7BUbFaA26s48pymU6g14k\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.18+commit.87f61d96"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"type":"error","name":"EnumerableMapNonexistentKey"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@chainlink/contracts/=lib/chainlink/contracts/src/v0.6/","@openzeppelin/contracts/=lib/openzeppelin/contracts/contracts/","chainlink/=lib/chainlink/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/libraries/utils/EnumerableMap.sol":"EnumerableMap"},"evmVersion":"paris","libraries":{}},"sources":{"src/libraries/utils/EnumerableMap.sol":{"keccak256":"0x5780c66f9d217155ad1af01d67e58455beb3fe9cdb64790c20dbdf8cc465f1f5","urls":["bzz-raw://cd7babf7b080cfc91b967ed23835b5020668b77c9d43d421f8c84f6b17ec118a","dweb:/ipfs/QmRYC3GkPgq2sA2sJXv7FfWjCcCcz13ZUkPvFd5bfidGvU"],"license":"MIT"},"src/libraries/utils/EnumerableSet.sol":{"keccak256":"0x0e3ca9ad9e3f74b51acdbb389dc450e09d35a865270cb74e05ff067b0da5baaf","urls":["bzz-raw://6d9312af03519821e5b55c184b30dbac8eb936701eaeafd6cebbd440947e9763","dweb:/ipfs/QmWvpsYDiZaSu8xLSy6Kh3XtH7BUbFaA26s48pymU6g14k"],"license":"MIT"}},"version":1},"id":71}