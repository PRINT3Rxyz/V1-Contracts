{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220327807765541f65f5c2a09943b5a7d44d2d5033bf940796bd634dae8fa6795a164736f6c63430008120033","sourceMap":"1329:11630:72:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1329:11630:72;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220327807765541f65f5c2a09943b5a7d44d2d5033bf940796bd634dae8fa6795a164736f6c63430008120033","sourceMap":"1329:11630:72:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/utils/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink/contracts/src/v0.6/\",\":@openzeppelin/contracts/=lib/openzeppelin/contracts/contracts/\",\":chainlink/=lib/chainlink/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/libraries/utils/EnumerableSet.sol\":{\"keccak256\":\"0x0e3ca9ad9e3f74b51acdbb389dc450e09d35a865270cb74e05ff067b0da5baaf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d9312af03519821e5b55c184b30dbac8eb936701eaeafd6cebbd440947e9763\",\"dweb:/ipfs/QmWvpsYDiZaSu8xLSy6Kh3XtH7BUbFaA26s48pymU6g14k\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.18+commit.87f61d96"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@chainlink/contracts/=lib/chainlink/contracts/src/v0.6/","@openzeppelin/contracts/=lib/openzeppelin/contracts/contracts/","chainlink/=lib/chainlink/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/libraries/utils/EnumerableSet.sol":"EnumerableSet"},"evmVersion":"paris","libraries":{}},"sources":{"src/libraries/utils/EnumerableSet.sol":{"keccak256":"0x0e3ca9ad9e3f74b51acdbb389dc450e09d35a865270cb74e05ff067b0da5baaf","urls":["bzz-raw://6d9312af03519821e5b55c184b30dbac8eb936701eaeafd6cebbd440947e9763","dweb:/ipfs/QmWvpsYDiZaSu8xLSy6Kh3XtH7BUbFaA26s48pymU6g14k"],"license":"MIT"}},"version":1},"id":72}